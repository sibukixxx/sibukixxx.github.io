{"version":3,"sources":["webpack:///./src/templates/tag.js","webpack:///./src/components/Sidebar/Friend/index.js","webpack:///./src/components/Sidebar/LatestPost/index.js","webpack:///./src/components/Sidebar/Information/index.js","webpack:///./src/components/Sidebar/index.js","webpack:///./src/components/Tag/index.js","webpack:///./src/api/images.js","webpack:///./src/components/SEO/index.js","webpack:///./src/components/Card/index.js"],"names":["TagPage","data","pageContext","edges","allMarkdownRemark","tag","className","style","margin","fontSize","length","map","node","frontmatter","key","id","title","url","siteTitleAlt","isPost","description","image","pageQuery","config","friends","Friend","friend","ExternalLink","href","rel","LatestPost","posts","to","slug","fields","Information","totalCount","defaultProps","wordings","githubUsername","zhihuUsername","email","iconUrl","about","facebook","Icon","icon","target","Sidebar","latestPosts","src","alt","query","render","all","limited","Tag","name","count","parseImgur","rawImage","size","match","resizedImage","replace","small","medium","large","huge","parseImageTag","text","parseTitle","module","exports","getGalleryImage","SEO","content","type","JSON","stringify","alternateName","itemListElement","position","item","headline","schemaOrgJSONLD","property","siteFBAppID","twitter_username","CardHeader","headerImage","color","backgroundColor","backgroundImage","Card","date","headerBackgroundColor","tags","split"],"mappings":"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","file":"component---src-templates-tag-js-ba7ebdebfa4c74d7d071.js","sourcesContent":["import React from 'react';\nimport { graphql } from 'gatsby';\nimport Card from '../components/Card';\nimport SEO from '../components/SEO';\nimport Sidebar from '../components/Sidebar';\n\n// eslint-disable-next-line react/prop-types\nconst TagPage = ({ data, pageContext }) => {\n  const { edges } = data.allMarkdownRemark;\n  const { tag } = pageContext;\n  return (\n    <div className=\"container\">\n      <div\n        className=\"row\"\n        style={{\n          margin: 15,\n        }}\n      >\n        <Sidebar />\n\n        <div className=\"col-xl-10 col-lg-7 col-md-12 col-xs-12 order-2\">\n          <div\n            className=\"col-12\"\n            style={{\n              fontSize: 20,\n              margin: 15,\n            }}\n          >\n            {edges.length}\n            &nbsp;Articles in&nbsp;\n            {tag}\n          </div>\n          {edges.map(({ node }) => (\n            <Card {...node.frontmatter} key={node.id} />\n          ))}\n        </div>\n\n        <div className=\"col-xl-2 col-lg-1 order-3\" />\n      </div>\n\n      <SEO\n        title={tag}\n        url={`/tag/${tag}`}\n        siteTitleAlt=\"Calpa's Blog\"\n        isPost={false}\n        description={tag}\n        image=\"https://i.imgur.com/M795H8A.jpg\"\n      />\n    </div>\n  );\n};\n\nexport default TagPage;\n\nexport const pageQuery = graphql`\n  query tagQuery($tag: [String!]) {\n    allMarkdownRemark(\n      sort: { order: DESC, fields: frontmatter___date }\n      filter: { frontmatter: { tags: { in: $tag } } }\n    ) {\n      edges {\n        node {\n          id\n          frontmatter {\n            id\n            url: slug\n            title\n            date\n            tags\n            headerImage\n            description\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\n\nimport ExternalLink from '../../ExternalLink';\n\nimport { config } from '../../../../data';\n\nimport './index.scss';\n\nconst { friends = [] } = config;\n\nconst Friend = () => (\n  <div className=\"friend\">\n    <p>友情鏈接</p>\n    {friends.map(friend => (\n      <ExternalLink\n        href={friend.href}\n        title={friend.title}\n        key={friend.title}\n        rel=\"noopener\"\n      />\n    ))}\n  </div>\n);\n\nexport default Friend;\n","import React from 'react';\n\nimport { Link } from 'gatsby';\nimport PropTypes from 'prop-types';\n\nimport './index.scss';\n\nconst LatestPost = ({ posts }) => (\n  <div className=\"latest-post\">\n    <p>最新文章</p>\n    {posts.map(({ node }) => (\n      <Link\n        to={node.frontmatter.url || node.frontmatter.slug || node.fields.slug}\n        key={node.frontmatter.url || node.frontmatter.slug || node.fields.slug}\n        href={node.frontmatter.url || node.frontmatter.slug || node.fields.slug}\n      >\n        {node.frontmatter.title}\n      </Link>\n    ))}\n  </div>\n);\n\nLatestPost.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default LatestPost;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport Friend from '../Friend';\nimport LatestPost from '../LatestPost';\nimport './index.scss';\n\n// eslint-disable-next-line react/prop-types\nconst Information = ({ totalCount, posts }) => (\n  <div className=\"d-none d-lg-block information my-2\">\n    <hr />\n    <p>\n      共&nbsp;\n      {totalCount}\n      &nbsp;篇文章\n    </p>\n    <hr />\n    <LatestPost posts={posts} />\n    <hr />\n    <Friend />\n  </div>\n);\n\nInformation.propTypes = {\n  totalCount: PropTypes.number.isRequired,\n  posts: PropTypes.array,\n};\n\nInformation.defaultProps = {\n  posts: [],\n};\n\nexport default Information;\n","import React from 'react';\nimport { Link, StaticQuery, graphql } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { config } from '../../../data';\n\nimport Information from './Information';\n\nimport './index.scss';\n\nconst {\n  wordings = [],\n  githubUsername,\n  zhihuUsername,\n  email,\n  iconUrl,\n  about,\n  facebook,\n} = config;\n\nconst Icon = ({ href, icon }) => (\n  <a\n    target=\"_blank\"\n    href={href}\n    rel=\"external nofollow noopener noreferrer\"\n    className=\"custom-icon\"\n  >\n    <span className=\"fa-layers fa-fw fa-2x\">\n      <FontAwesomeIcon icon={icon} />\n    </span>\n  </a>\n);\n\nconst Sidebar = ({ totalCount, latestPosts }) => (\n  <header className=\"intro-header site-heading text-center col-xl-2 col-lg-3 col-xs-12 order-lg-1\">\n    <div className=\"about-me\">\n      <Link to={about} href={about} className=\"name\">\n        <img className=\"avatar\" src={iconUrl} alt=\"Calpa\" />\n        <h4>Calpa</h4>\n      </Link>\n      <p className=\"mb-1\">{wordings[0]}</p>\n      <p className=\"mb-3\">{wordings[1]}</p>\n      <Icon\n        href={`https://www.zhihu.com/people/${zhihuUsername}`}\n        icon={['fab', 'zhihu']}\n      />\n      <Icon\n        href={`https://github.com/${githubUsername}`}\n        icon={['fab', 'github']}\n      />\n      <Icon href={`mailto:${email}`} icon={['far', 'envelope']} />\n      {facebook\n        && <Icon href={`https://www.facebook.com/${facebook}/`} icon={['fab', 'facebook']} />\n      }\n      <Information totalCount={totalCount} posts={latestPosts} />\n    </div>\n  </header>\n);\n\nIcon.propTypes = {\n  href: PropTypes.string.isRequired,\n  icon: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nSidebar.propTypes = {\n  totalCount: PropTypes.number,\n  latestPosts: PropTypes.array, //eslint-disable-line\n};\n\nSidebar.defaultProps = {\n  totalCount: 0,\n  latestPosts: [],\n};\n\nexport default () => (\n  <StaticQuery\n    query={graphql`\n      fragment cardData on MarkdownRemark {\n        fields {\n          slug\n        }\n        frontmatter {\n          id\n          title\n          url: slug\n          date\n          tags\n          description\n          headerImage\n        }\n      }\n\n      query SidebarQuery {\n        all: allMarkdownRemark {\n          totalCount\n        }\n\n        limited: allMarkdownRemark(\n          sort: { order: DESC, fields: frontmatter___date }\n          limit: 6\n        ) {\n          latestPosts: edges {\n            node {\n              ...cardData\n            }\n          }\n        }\n      }\n    `}\n    render={data => <Sidebar {...data.all} {...data.limited} />}\n  />\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Tag = ({ name, count }) => (\n  <a href={`/tag/${name}`} className=\"header-tag\">\n    {name}\n    &nbsp;\n    {count}\n  </a>\n);\n\nTag.propTypes = {\n  name: PropTypes.string.isRequired,\n  count: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\n\nTag.defaultProps = {\n  count: '',\n};\n\nexport default Tag;\n","// s = Small Square (90×90)\n// b = Big Square (160×160)\n// t = Small Thumbnail (160×160)\n// m = Medium Thumbnail (320×320)\n// l = Large Thumbnail (640×640)\n// h = Huge Thumbnail (1024×1024)\nconst defaultPicture = 'M795H8A.jpg';\n\nconst parseImgur = (rawImage, size = 'large') => {\n  if (!rawImage) {\n    return `https://i.imgur.com/${defaultPicture}`;\n  }\n\n  const mapping = {\n    'small-square': 's',\n    'big-square': 'b',\n    small: 't',\n    medium: 'm',\n    large: 'l',\n    huge: 'h',\n  };\n\n  // Don't resize the png image\n  // as there is a transparent bug in imgur\n  if (rawImage.match('(png)|(gif)')) {\n    // Prevent double http url\n    if (rawImage.match('http')) {\n      return rawImage;\n    }\n    return `https://i.imgur.com/${rawImage}`;\n  }\n\n  const resizedImage = rawImage.replace(/(.*)\\.(.*)/, `$1${mapping[size]}.$2`);\n  // Prevent double http url\n  if (resizedImage.match('http')) {\n    return resizedImage;\n  }\n  return `https://i.imgur.com/${resizedImage}`;\n};\n\nconst parseTitle = (title, text) => `title=\"${title || text}\"`;\n\nconst parseImageTag = ({ href, title, text }) => `<img class=\"lozad d-block mx-auto\" data-src=${parseImgur(\n  href,\n  'large',\n)} ${parseTitle(title, text)} />`;\n\nconst getGalleryImage = ({ href, title, text }) => `<a data-fancybox=\"gallery\" href=\"${parseImgur(\n  href,\n  'huge',\n)}\">${parseImageTag({ href, title, text })}</a>`;\n\nmodule.exports = {\n  parseImgur,\n  parseImageTag,\n  getGalleryImage,\n};\n","import React from 'react';\nimport Helmet from 'react-helmet';\n\nimport PropTypes from 'prop-types';\n\nimport config from '../../../data';\n\nconst schemaOrgJSONLD = ({\n  url,\n  title,\n  siteTitleAlt,\n  isPost,\n  image,\n  description,\n}) => [\n  {\n    '@context': 'http://schema.org',\n    '@type': 'WebSite',\n    url,\n    name: title,\n    alternateName: siteTitleAlt || '',\n  },\n  isPost\n    ? {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: [\n        {\n          '@type': 'ListItem',\n          position: 1,\n          item: {\n            '@id': url,\n            name: title,\n            image,\n          },\n        },\n      ],\n    }\n    : '',\n  isPost\n    ? {\n      '@context': 'http://schema.org',\n      '@type': 'BlogPosting',\n      url,\n      name: title,\n      alternateName: siteTitleAlt || '',\n      headline: title,\n      image: {\n        '@type': 'ImageObject',\n        url: image,\n      },\n      description,\n    }\n    : '',\n];\n\nconst SEO = ({\n  url, title, description, image, siteTitleAlt, isPost,\n}) => (\n  <Helmet>\n    <title>{title}</title>\n\n    {/* General tags */}\n    <meta name=\"description\" content={description} />\n    <meta name=\"image\" content={image} />\n\n    {/* Schema.org tags */}\n    <script type=\"application/ld+json\">\n      {JSON.stringify(schemaOrgJSONLD(url, title, siteTitleAlt, isPost))}\n    </script>\n\n    {/* OpenGraph tags */}\n    <meta property=\"og:url\" content={url} />\n    {isPost ? (\n      <meta property=\"og:type\" content=\"article\" />\n    ) : (\n      <meta property=\"og:type\" content=\"website\" />\n    )}\n    <meta property=\"og:title\" content={title} />\n    <meta property=\"og:description\" content={description} />\n    <meta property=\"og:image\" content={image} />\n    <meta\n      property=\"fb:app_id\"\n      content={config.siteFBAppID ? config.siteFBAppID : ''}\n    />\n\n    {/* Twitter Card tags */}\n    <meta name=\"twitter:card\" content=\"summary_large_image\" />\n    <meta\n      name=\"twitter:creator\"\n      content={config.twitter_username ? config.twitter_username : ''}\n    />\n    <meta name=\"twitter:title\" content={title} />\n    <meta name=\"twitter:description\" content={description} />\n    <meta name=\"twitter:image\" content={image} />\n  </Helmet>\n);\n\nSEO.propTypes = {\n  url: PropTypes.string.isRequired,\n  title: PropTypes.string,\n  description: PropTypes.string.isRequired,\n  image: PropTypes.string.isRequired,\n  siteTitleAlt: PropTypes.string.isRequired,\n  isPost: PropTypes.bool.isRequired,\n};\n\nSEO.defaultProps = {\n  title: config.title,\n};\n\nexport default SEO;\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport PropTypes from 'prop-types';\n\nimport Tag from '../Tag';\n\nimport { parseImgur } from '../../api/images';\n\nimport './index.scss';\n\nconst imageStyle = (headerImage, color) => ({\n  backgroundColor: `#${color}`,\n  backgroundImage: ` url(${parseImgur(headerImage, 'large')})`,\n});\n\nconst CardHeader = ({ url, image, backgroundColor }) => (\n  <Link to={url} href={url}>\n    <div className=\"wrapper\" style={imageStyle(image, backgroundColor)} />\n  </Link>\n);\n\nconst Card = ({\n  title,\n  date,\n  url,\n  headerImage,\n  headerBackgroundColor,\n  description,\n  tags = [],\n}) => (\n  <div className=\"col-sm-12 pb-4\">\n    <div className=\"custom-card\">\n      {headerImage && (\n        <CardHeader\n          url={url}\n          image={headerImage}\n          backgroundColor={headerBackgroundColor}\n        />\n      )}\n      <div className=\"data\">\n        <div className=\"content\">\n          <div className=\"stats\">\n            <span className=\"date\">{date.split('T')[0]}</span>\n            {tags.map(name => (\n              <Tag name={name} key={name} />\n            ))}\n          </div>\n          <Link to={url} href={url}>\n            <h4 className=\"title\">{title}</h4>\n          </Link>\n          <p>{description}</p>\n          <Link to={url} href={url}>\n            ....繼續閱讀全文內容\n          </Link>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  date: PropTypes.string,\n  url: PropTypes.string.isRequired,\n  headerImage: PropTypes.string,\n  headerBackgroundColor: PropTypes.string,\n  description: PropTypes.string.isRequired,\n  tags: PropTypes.arrayOf(PropTypes.string),\n};\n\nCardHeader.propTypes = Card.propTypes;\n\nCard.defaultProps = {\n  headerImage: '',\n  tags: [],\n  date: '',\n  headerBackgroundColor: '',\n};\n\nexport default Card;\n"],"sourceRoot":""}