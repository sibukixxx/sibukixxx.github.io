<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sibukixxx.github.io</title>
    <link>https://sibukixxx.github.io/index.xml</link>
    <description>Recent content on sibukixxx.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>Asia/Tokyo</language>
    <lastBuildDate>Tue, 14 Mar 2017 14:59:07 +0900</lastBuildDate>
    <atom:link href="https://sibukixxx.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>knq/usql を試してみた</title>
      <link>https://sibukixxx.github.io/blog/knq/usql-%E3%82%92%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Tue, 14 Mar 2017 14:59:07 +0900</pubDate>
      
      <guid>https://sibukixxx.github.io/blog/knq/usql-%E3%82%92%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description>

&lt;h2 id=&#34;usql-とは&#34;&gt;usql とは&lt;/h2&gt;

&lt;p&gt;Githubの説明から、「usql is a universal command-line interface for SQL databases
」とある。
- 複数のRDBMSに対応したCLIベースのクライアント
- psql互換
- golang実装。&lt;br /&gt;
&lt;a href=&#34;https://github.com/knq/usql&#34;&gt;knq/usql&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;インストール&#34;&gt;インストール&lt;/h2&gt;

&lt;p&gt;$ go get -u github.com/knq/usql&lt;/p&gt;

&lt;h2 id=&#34;ローカルホストで試してみた&#34;&gt;ローカルホストで試してみた&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;usql pg://user:pass@localhost/dbname?sslmode=disable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Postgresで試したところSSLで弾かれたが既にissueに解決方法が記載されていた.&lt;br /&gt;
末尾に「?sslmode=disable 」を付与すればいいようだ.&lt;br /&gt;
cf. &lt;a href=&#34;https://github.com/knq/usql/issues/6&#34;&gt;Allow Postgres without SSL?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go実装なので簡単に導入して試せるところがいい.&lt;br /&gt;
複数DBを行ったり来たりすることはよくあるので引き続き使っていきたい.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>自分用tmuxドキュメント</title>
      <link>https://sibukixxx.github.io/blog/%E8%87%AA%E5%88%86%E7%94%A8tmux%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88/</link>
      <pubDate>Mon, 13 Mar 2017 12:59:07 +0900</pubDate>
      
      <guid>https://sibukixxx.github.io/blog/%E8%87%AA%E5%88%86%E7%94%A8tmux%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88/</guid>
      <description>

&lt;p&gt;思い出したようにtmux の整理をしていたら昔設定した内容を忘れていたので備忘録として残しておく。&lt;/p&gt;

&lt;h3 id=&#34;prefix-keyの変更&#34;&gt;prefix-keyの変更&lt;/h3&gt;

&lt;p&gt;C-x 派&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# prefix
unbind-key C-b
set -g prefix &#39;C-x&#39;
bind-key &#39;C-x&#39; send-prefix
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;設定のリロード&#34;&gt;設定のリロード&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;[prefix-key] r&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;pane内でスクロール&#34;&gt;pane内でスクロール&lt;/h3&gt;

&lt;p&gt;スクロールモード&lt;br /&gt;
&lt;code&gt;[prefix-key]  [&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;fn + ↑↓&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;各ペインの同期操作&#34;&gt;各ペインの同期操作&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;:set-window-option synchronize-panes on&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;キーバインド設定で省略可能&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bind e setw synchronize-panes on
bind E setw synchronize-panes off
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;プラグイン周り&#34;&gt;プラグイン周り&lt;/h3&gt;

&lt;p&gt;いつ導入したか思い出せないが、tmux-plugins/tpm を利用していた。&lt;br /&gt;
&lt;code&gt;[prefix-key] I&lt;/code&gt;でインストールを実行する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set -g @tpm_plugins &amp;quot; \
    tmux-plugins/tpm \
    tmux-plugins/tmux-sidebar \
    tmux-plugins/tmux-copycat \
    tmux-plugins/tmux-open \
    tmux-plugins/tmux-resurrect \
    tmux-yank/tmux-yank \
    tmux-plugins/tmux-battery \
    tmux-plugins/tmux-online-status \
&amp;quot;
# tmux-resurrect
set -g @resurrect-save &#39;S&#39;
set -g @resurrect-restore &#39;R&#39;

# Initialize tpm
run-shell ~/.tmux/plugins/tpm/tpm
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>PM勉強会メモ</title>
      <link>https://sibukixxx.github.io/blog/pm%E5%8B%89%E5%BC%B7%E4%BC%9A%E3%83%A1%E3%83%A2/</link>
      <pubDate>Thu, 02 Mar 2017 19:38:03 +0900</pubDate>
      
      <guid>https://sibukixxx.github.io/blog/pm%E5%8B%89%E5%BC%B7%E4%BC%9A%E3%83%A1%E3%83%A2/</guid>
      <description>

&lt;p&gt;先日参加したプロジェクトマネージャ勉強会のメモ書き.&lt;br /&gt;
PMの基礎的な考え方を整理する.&lt;/p&gt;

&lt;h2 id=&#34;プロジェクトとは-pmとは&#34;&gt;プロジェクトとは？PMとは？&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;ルーチンワークではない&lt;/li&gt;
&lt;li&gt;独自の、有期性のある&lt;/li&gt;
&lt;li&gt;「群盲象を撫ず」= プロジェクトが難しい理由&lt;/li&gt;
&lt;li&gt;不確実をみんなで確実にする&lt;/li&gt;
&lt;li&gt;確実なものに謙虚であれ&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;失敗例&#34;&gt;失敗例&lt;/h2&gt;

&lt;h3 id=&#34;計画不足-必要な社内手続きを知らない&#34;&gt;計画不足：必要な社内手続きを知らない&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;- 役員会の承認
- 法務チェック
- セキュリティ監査
- セキュリティ規定の更新を怠る
- →どれかを怠ってリリースの延期につながる
- →プロダクトができていても
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;状況確認-人材損失&#34;&gt;状況確認：人材損失&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;- 要件定義に時間がかかる
- エンジニアが企画ミーティングが多すぎる
- デザインが上がってこない
- 機能にいつまでも変更が入る
- エンジニアが尻ぬぐいさせられる
- 辞める
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;情報共有-ど忘れ&#34;&gt;情報共有：ど忘れ&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;- 忘れる
- 都合がいい用に記憶が変わってしまう
- 「言った」「言わない」紛争
- 生産性低下
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;改善手段&#34;&gt;改善手段&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;計画：洗い出し&lt;/li&gt;
&lt;li&gt;状況確認：締切の共有&lt;/li&gt;
&lt;li&gt;情報共有：チームに共有&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;従来の方法の欠点&#34;&gt;従来の方法の欠点&lt;/h3&gt;

&lt;p&gt;計画：Excel、次点でTrello、Jira
状況確認：電話、定例ミーティングで進捗確認
情報共有：メール、dropbox、slack, skype&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;乱立するツール郡.&lt;/li&gt;
&lt;li&gt;学習コスト過多.&lt;/li&gt;
&lt;li&gt;サービスごとにログイン管理するコスト高い.&lt;/li&gt;
&lt;li&gt;連携機能の使い方のレベルが人によっては障壁になる.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;利用するツールに偏りが出る&lt;br /&gt;
情報量が増えすぎる、チャットのログが追えない等&lt;/p&gt;

&lt;h3 id=&#34;タスクを洗い出せない&#34;&gt;タスクを洗い出せない&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;計画は完璧である必要はない&lt;/li&gt;
&lt;li&gt;抜け漏れはチーム間で確認を早い時間にやる&lt;/li&gt;
&lt;li&gt;社内手続きはわからないから、全体像を作って抜け漏れを知ってる人に埋めさせる&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;締め切りが日々変わっていく&#34;&gt;締め切りが日々変わっていく&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;プロジェクトマップ&lt;/li&gt;
&lt;li&gt;担当者がバラバラ、タスクの分岐で調整する&lt;/li&gt;
&lt;li&gt;後続タスクを別の人に変更させる&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;共有する理解がひとによって違う&#34;&gt;共有する理解がひとによって違う&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;言った言わない&lt;/li&gt;
&lt;li&gt;共有された情報を理解できない人、平均以上の人の理解を増やす&lt;/li&gt;
&lt;li&gt;どういう経緯、どういう理由で&lt;/li&gt;
&lt;li&gt;関係メンバーには最初から権限を付与しておく&lt;/li&gt;
&lt;li&gt;後から深く関わる場合後追いしやすいようにする&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;駄目なプロジェクト&#34;&gt;駄目なプロジェクト&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;やらなきゃいけないんだけど誰も責任持って引っ張っていかない&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;pmのコツ&#34;&gt;PMのコツ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;タスクを発起人が先に全て洗い出す&lt;/li&gt;
&lt;li&gt;アウトソーシングの場合&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>[PHP] Acquire age from birth date (Carbon)</title>
      <link>https://sibukixxx.github.io/blog/php-acquire-age-from-birth-date-carbon/</link>
      <pubDate>Fri, 20 Jan 2017 16:28:16 +0900</pubDate>
      
      <guid>https://sibukixxx.github.io/blog/php-acquire-age-from-birth-date-carbon/</guid>
      <description>

&lt;h2 id=&#34;php-acquire-age-from-birth-date-carbon&#34;&gt;[PHP] Acquire age from birth date (Carbon)&lt;/h2&gt;

&lt;p&gt;Carbon使えば一発らしい。ライブラリ冥利に尽きる&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.84kure.com/blog/2016/06/16/php-%E7%94%9F%E5%B9%B4%E6%9C%88%E6%97%A5%E3%81%8B%E3%82%89%E5%B9%B4%E9%BD%A2%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B-carbon/&#34;&gt;参考：生年月日から年齢を取得する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$dob = Carbon::parse(&#39;1987-02-18&#39;);
$age = $dob-&amp;gt;age;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>[Vue warn]: Cannot find element</title>
      <link>https://sibukixxx.github.io/blog/vue-warn-cannot-find-element/</link>
      <pubDate>Fri, 13 Jan 2017 13:37:41 +0900</pubDate>
      
      <guid>https://sibukixxx.github.io/blog/vue-warn-cannot-find-element/</guid>
      <description>

&lt;h3 id=&#34;コンソール上の警告-vue-warn-cannot-find-element-を削除する&#34;&gt;コンソール上の警告([Vue warn]: Cannot find element) を削除する&lt;/h3&gt;

&lt;p&gt;参考URL: &lt;a href=&#34;http://qiita.com/yoneapp/items/3fbe4c1c133cfef87230&#34;&gt;http://qiita.com/yoneapp/items/3fbe4c1c133cfef87230&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;自分のLaravel5.2 + Vue.js環境でも起きたので対処法をメモ.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;document.addEventListener(&#39;DOMContentLoaded&#39;, function() {
  if (document.getElementById(&amp;quot;feed&amp;quot;)) { require(&#39;./feed.js&#39;) }
  if (document.getElementById(&amp;quot;shop&amp;quot;)) { require(&#39;./shop.js&#39;)  }
}, false);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;consider-pre-initializing-the-property-with-the-data-option-for-more-reliable-reactivity-and-better-performance&#34;&gt;Consider pre-initializing the property with the &amp;ldquo;data&amp;rdquo; option for more reliable reactivity and better performance.&lt;/h3&gt;

&lt;p&gt;参考URL: &lt;a href=&#34;https://github.com/vuejs/Discussion/issues/352#issuecomment-132942027&#34;&gt;https://github.com/vuejs/Discussion/issues/352#issuecomment-132942027&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For components, data must be function returning object:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;data: function() {
  return {
    filterBy: &#39;none&#39;
  }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>日記（2016/11/25）</title>
      <link>https://sibukixxx.github.io/blog/%E6%97%A5%E8%A8%982016/11/25/</link>
      <pubDate>Fri, 25 Nov 2016 17:26:52 +0900</pubDate>
      
      <guid>https://sibukixxx.github.io/blog/%E6%97%A5%E8%A8%982016/11/25/</guid>
      <description>&lt;p&gt;今年は機械学習が流行になった.&lt;br /&gt;
高校時代に数学を選択しなかったから学ぼうと思っても基本のキでつまづいてしまうことが多い.&lt;br /&gt;
焦っても仕方がないので、わからないことがでてきたらひとつひとつ潰していくしかない.
仕事で直接使わないからといって、これからのシステム開発で全く知らないのもいかがなものかと思うし.&lt;/p&gt;

&lt;p&gt;そんな風に先月くらいまでぼんやり考えていたけど、今月からお世話になっている現場では統計や機械学習を売りにしたシステム開発をしている.
Python すら実務で本格的に使うのは初めてだったけれどNumpy や Pandas は毎日触れるようになった.&lt;/p&gt;

&lt;p&gt;だからなのか、最近はさらに数学の理解を高める必要性を感じている. 少なくとも回帰分析が実際何をしているのか、何を解決したいのかをもっとはっきり知っておかないと実装に影響がでるからだ.&lt;/p&gt;

&lt;p&gt;本屋に立ち寄ってみるも、まず何から手を付ければいいか見当がつかなかったので地元の図書館でいい本がないか物色してきた.&lt;br /&gt;
そして今日借りてきた本が以下の3冊.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;『もう一度 微分積分』&lt;/li&gt;
&lt;li&gt;『APIデザイン ケーススタディ』&lt;/li&gt;
&lt;li&gt;『システムインテグレーション 再生の戦略』&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;数学に関する本は1冊のみだけどちょうど知りたかった微分を会話形式で説明してくれていたので基礎を身に着けていきたい.
他の2冊は前から読みたくて、たまたま見つけたので一緒に借りてきた. 図書館の有効活用ができて気分がいい.&lt;/p&gt;

&lt;p&gt;文章を書く訓練にもなるので読み終えたら簡単な書評でも残せたらいいと思ってる.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>11/14 作業メモ.</title>
      <link>https://sibukixxx.github.io/blog/11/14-%E4%BD%9C%E6%A5%AD%E3%83%A1%E3%83%A2./</link>
      <pubDate>Mon, 14 Nov 2016 10:10:05 +0900</pubDate>
      
      <guid>https://sibukixxx.github.io/blog/11/14-%E4%BD%9C%E6%A5%AD%E3%83%A1%E3%83%A2./</guid>
      <description>

&lt;p&gt;作業メモ。&lt;/p&gt;

&lt;h3 id=&#34;done&#34;&gt;Done&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ownCloud&lt;/li&gt;
&lt;li&gt;Let’sencrypt

&lt;ul&gt;
&lt;li&gt;certbot&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;自動更新&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;CentOS7

&lt;ul&gt;
&lt;li&gt;systemctl&lt;/li&gt;
&lt;li&gt;firewalld&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Route53にA record追加&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;next&#34;&gt;Next&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;conoha オブジェクトストレージ追加&lt;/li&gt;
&lt;li&gt;ownCloud 連携&lt;/li&gt;
&lt;li&gt;ownCloud Serverのセキュリティ強化&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Terraform で GCE やってみた</title>
      <link>https://sibukixxx.github.io/blog/terraform-%E3%81%A7-gce-%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Tue, 08 Nov 2016 16:02:59 +0900</pubDate>
      
      <guid>https://sibukixxx.github.io/blog/terraform-%E3%81%A7-gce-%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description>

&lt;p&gt;GCP が東京リージョン(asia-northeast1)で正式運用開始されたようなので、いい機会だからTerraform を使ってインスタンスを立ち上げたくなった&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://googlecloudplatform-japan.blogspot.jp/2016/11/tokyo-region-now-open.html?m=1&#34;&gt;東京 GCP リージョン の正式運用を開始しました&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;terraformのインストール&#34;&gt;Terraformのインストール&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[@MBP01 workspace]$ brew install terraform
[@MBP01 workspace]$ terraform version  
Terraform v0.7.9
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;gcpの認証情報を取得&#34;&gt;GCPの認証情報を取得&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://console.cloud.google.com/home/dashboard&#34;&gt;GCP コンソール&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;API Manager&lt;/li&gt;
&lt;li&gt;認証情報&lt;/li&gt;
&lt;li&gt;認証情報を作成&lt;/li&gt;
&lt;li&gt;サービスアカウント キー&lt;/li&gt;
&lt;li&gt;Compute Engine default service account&lt;/li&gt;
&lt;li&gt;JSON&lt;/li&gt;
&lt;li&gt;作成&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;terraform-の設定ファイルを準備する&#34;&gt;Terraform の設定ファイルを準備する&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;サンプル(gce_sample.tf)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;# Configure the Google Cloud provider
provider &amp;quot;google&amp;quot; {
   　credentials = &amp;quot;${file(“service_account.json&amp;quot;)}&amp;quot;
　　　project = “{project_id}”
    region = &amp;quot;asia-northeast1-a&amp;quot;
}

# Configure the Google Compute Engine Instance
resource &amp;quot;google_compute_instance&amp;quot; &amp;quot;default&amp;quot; {
    name = &amp;quot;test01&amp;quot;
    machine_type = &amp;quot;f1-micro&amp;quot;
    zone = &amp;quot;asia-northeast1-a&amp;quot;
    tags = [“test”]

    disk {
        image = &amp;quot;debian-7-wheezy-v20140814&amp;quot;
    }

    network_interface {
        network = &amp;quot;default&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;gce-の確認&#34;&gt;GCE の確認&lt;/h3&gt;

&lt;p&gt;“name” で指定したサーバーが立ち上がっているのを確認&lt;/p&gt;

&lt;p&gt;おわり&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>git stash</title>
      <link>https://sibukixxx.github.io/blog/git-stash/</link>
      <pubDate>Sat, 29 Oct 2016 18:56:53 +0900</pubDate>
      
      <guid>https://sibukixxx.github.io/blog/git-stash/</guid>
      <description>&lt;pre&gt;&lt;code&gt;git stash save
git stash save &amp;quot;message&amp;quot;
git stash list 
git stash show stash@{N}
git stash show -p stash@{N} # diff
git stash pop stash@{N} # apply =&amp;gt; delete
git stash apply stash@{N} # apply =&amp;gt; leave
git stash drop stash@{N} 
git stash -k # all unstage
git stash -u # all untrack
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Thinking of markup</title>
      <link>https://sibukixxx.github.io/blog/thinking-of-markup/</link>
      <pubDate>Sat, 29 Oct 2016 17:27:03 +0900</pubDate>
      
      <guid>https://sibukixxx.github.io/blog/thinking-of-markup/</guid>
      <description>

&lt;p&gt;マークアップをする心構えとして、HTML5にのっとった要素を積極的に利用していく。役割をHTML上で明示してあれば可用性が高まる。role属性やWAI-ARIA が当てはまる。逆にボタンを実装するような場合、単にdiv + aタグで囲みCSSでなんでもこなそうとしないほうがよい。&lt;/p&gt;

&lt;p&gt;最近 WAI-ARIA に関する記事が増えてきた。記憶の掘り起こしのために雑なまとめを残しておく。&lt;/p&gt;

&lt;h3 id=&#34;role属性&#34;&gt;role属性&lt;/h3&gt;

&lt;p&gt;role 属性の一覧は下記URLで確認することができる&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/TR/wai-aria/roles#role_definitions_header&#34;&gt;5.4. Definition of Roles(全 role 一覧) - W3C / ARIA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;要素すべてについて、role属性を意識する必要は無さそう&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;HTML5 以降の HTML に定義されるいくつかの要素は、暗黙的な role 属性が定義されています。 また、暗黙的な role 属性を持つ要素に対しては、それと同じ role 属性は指定するべきではない、とされています。 したがって、あらゆる要素に role を指定する作業コストは必要になりません。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://xn--lcki7of.jp/502/&#34;&gt;role 属性を正しく設定してアクセシビリティを高める&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;wai-aria-とは&#34;&gt;WAI-ARIA とは&lt;/h3&gt;

&lt;p&gt;WAI-ARIA は Webアプリケーションにおいてアクセシビリティを高めるために策定された仕様。HTMLマークアップしていく上でより詳細な役割を表現することができる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- aria-labelledby 属性
    - 要素とラベルを関連付ける属性
- aria-pressed 属性
    - トグルボタンを表現するための属性
- aria-checked 属性
    - チェック状態を示すためのWAI-ARIAの属性
- aria-hidden 属性
    - ユーザーエージェントに認識させたくない要素に指定するためのWAI-ARIA属性
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;使い方のサンプル&#34;&gt;使い方のサンプル&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;button + span + iconフォント&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;button type=&amp;quot;button&amp;quot; aria-pressed=&amp;quot;true&amp;quot;&amp;gt;
	&amp;lt;span class=“icon” aria-label=“メイン”&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;button + svg&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;button type=&amp;quot;button&amp;quot;  aria-pressed=&amp;quot;true&amp;quot;&amp;gt;
&amp;lt;svg roll=&amp;quot;img&amp;quot; aria-labelledby=“memo”&amp;gt;
    &amp;lt;title id=“memo”&amp;gt;メモ&amp;lt;/title&amp;gt;
    &amp;lt;use xlink:href=&amp;quot;icon-memo.svg&amp;quot;&amp;gt;
&amp;lt;/svg&amp;gt;
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;参考url&#34;&gt;参考URL&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/TR/wai-aria/states_and_properties#aria-checked&#34;&gt;aria-checked 属性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.webcreativepark.net/html/wai-aria/aria-hidden/&#34;&gt;aria-hidden 属性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>code</title>
      <link>https://sibukixxx.github.io/code/</link>
      <pubDate>Sun, 23 Oct 2016 23:17:59 +0900</pubDate>
      
      <guid>https://sibukixxx.github.io/code/</guid>
      <description>&lt;p&gt;Under construction..&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>https://sibukixxx.github.io/about/</link>
      <pubDate>Sun, 23 Oct 2016 23:17:13 +0900</pubDate>
      
      <guid>https://sibukixxx.github.io/about/</guid>
      <description>&lt;p&gt;工事中&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What is the Grand Totals Aggregations</title>
      <link>https://sibukixxx.github.io/blog/what-is-the-grand-totals-aggregations/</link>
      <pubDate>Sun, 23 Oct 2016 21:45:57 +0900</pubDate>
      
      <guid>https://sibukixxx.github.io/blog/what-is-the-grand-totals-aggregations/</guid>
      <description>

&lt;h1 id=&#34;gt集計とは&#34;&gt;GT集計とは？&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;「GT集計」とは、集計結果の最初に出てくる表で、回収データ全体の各回答比率が集計され、表示されている。グランドトータル（Grand Total）の略で単純集計ともいう。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.macromill.com/landing/words/a054.html&#34;&gt;マクロミル:GT集計とは&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;単純集計は集計結果の全体像を把握するとともに、データ本体が使えるデータかどうか確認・判断するために利用する。可能であれば、経年・類似データと比較できるとよい。&lt;/p&gt;

&lt;p&gt;集計データの取り扱いはあくまでも概要を把握することを目的とする。目的を見失わずに効率を求めることを優先していく。&lt;/p&gt;

&lt;h3 id=&#34;類似ワード&#34;&gt;類似ワード&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;クロス集計&lt;/li&gt;
&lt;li&gt;星取表&lt;/li&gt;
&lt;li&gt;分類項目・集計項目&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Python Anaconda install</title>
      <link>https://sibukixxx.github.io/blog/python-anaconda-install/</link>
      <pubDate>Wed, 19 Oct 2016 15:51:16 +0900</pubDate>
      
      <guid>https://sibukixxx.github.io/blog/python-anaconda-install/</guid>
      <description>&lt;p&gt;統計関連に携わることになり、基本的な統計・数学・機械学習を学んでいく必要が出てきた。
検証環境を手軽に準備したいため、主要ライブラリをオールインワンでインストールできるといわれているAnacondaを導入してみる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;動作環境&lt;/li&gt;
&lt;/ul&gt;

&lt;table frame=&#34;void&#34; rules=&#34;none&#34; style=&#34;width: 19em;&#34;&gt;
&lt;tbody valign=&#34;top&#34;&gt;
&lt;tr&gt;&lt;th&gt;OS:&lt;/th&gt;&lt;td&gt;CentOS6.5&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;導入コマンド&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/yyuu/pyenv.git ~/.pyenv
echo &#39;export PYENV_ROOT=&amp;quot;$HOME/.pyenv&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
echo &#39;export PATH=&amp;quot;$PYENV_ROOT/bin:$PATH&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
echo &#39;eval &amp;quot;$(pyenv init -)&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
source ~/.bashrc

pyenv install -l | grep ana
pyenv install anaconda3-2.5.0
pyenv rehash
pyenv global anaconda3-2.5.0
echo &#39;export PATH=&amp;quot;$PYENV_ROOT/versions/anaconda3-2.5.0/bin/:$PATH&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
source ~/.bashrc
conda update conda
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;副作用があるらしいので、Anaconda専用環境として利用していこうと思う。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;動作確認&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ python -V
Python 3.5.2 :: Anaconda 4.1.1 (64-bit)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/y__sama/items/5b62d31cb7e6ed50f02c&#34;&gt;データサイエンティストを目指す人のpython環境構築 2016&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Try to Self-Documented Makefile</title>
      <link>https://sibukixxx.github.io/blog/try-to-self-documented-makefile/</link>
      <pubDate>Wed, 19 Oct 2016 00:56:02 +0900</pubDate>
      
      <guid>https://sibukixxx.github.io/blog/try-to-self-documented-makefile/</guid>
      <description>

&lt;p&gt;みんなのGo 1章にあるMakefileを試した.&lt;br /&gt;
makeはいつかやろうとして後回しにしていたのでようやく取り組めてよかった.&lt;/p&gt;

&lt;p&gt;主な注意点は次の通り.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Makefileはタブインデントとする(indentation to tabs and not spaces)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DEFAULT_GOAL&lt;/code&gt; はデフォルトのターゲットを指定できる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GitHubを見る限りGoのライブラリでMakefileを利用する人は結構いるようなので&lt;br /&gt;
適宜参考にさせてもらいつつ自分の手に馴染ませていきたい.&lt;/p&gt;

&lt;h2 id=&#34;参考url&#34;&gt;参考URL&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/kasei-san/items/ad25df63260e86c5cc71&#34;&gt;Makefile ことはじめ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/auto-documented-makefile/&#34;&gt;Makefileを自己文書化する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.songmu.jp/riji/entry/2016-06-13-make2help.html&#34;&gt;Makefileを自己文書化する &lt;code&gt;make2help&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://postd.cc/go-best-practices-2016/#repository-structure&#34;&gt;6年間におけるGoのベストプラクティス: リポジトリ構造&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>