{"version":3,"sources":["webpack:///./src/components/Card/index.js","webpack:///./src/templates/tag.js","webpack:///./src/components/SEO/index.js","webpack:///./src/components/Sidebar/Friend/index.js","webpack:///./src/components/Sidebar/LatestPost/index.js","webpack:///./src/components/Sidebar/Information/index.js","webpack:///./src/components/Sidebar/index.js","webpack:///./src/api/images.js","webpack:///./src/components/Tag/index.js"],"names":["CardHeader","headerImage","color","url","image","backgroundColor","to","href","className","style","backgroundImage","parseImgur","Card","title","date","headerBackgroundColor","description","tags","split","map","name","Tag","key","defaultProps","TagPage","data","pageContext","edges","allMarkdownRemark","tag","margin","Sidebar","fontSize","length","node","frontmatter","id","SEO","siteTitleAlt","isPost","pageQuery","content","type","JSON","stringify","alternateName","itemListElement","position","item","headline","schemaOrgJSONLD","property","config","siteFBAppID","twitter_username","friends","Friend","friend","ExternalLink","rel","LatestPost","posts","slug","fields","Information","totalCount","wordings","githubUsername","zhihuUsername","email","iconUrl","about","facebook","Icon","icon","target","latestPosts","src","alt","query","render","all","limited","rawImage","size","match","resizedImage","replace","small","medium","large","huge","parseImageTag","text","parseTitle","module","exports","getGalleryImage","count"],"mappings":"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","file":"component---src-templates-tag-js-bbc049ec6a21aa4b343b.js","sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\nimport PropTypes from 'prop-types';\n\nimport Tag from '../Tag';\n\nimport { parseImgur } from '../../api/images';\n\nimport './index.scss';\n\nconst imageStyle = (headerImage, color) => ({\n  backgroundColor: `#${color}`,\n  backgroundImage: ` url(${parseImgur(headerImage, 'large')})`,\n});\n\nconst CardHeader = ({ url, image, backgroundColor }) => (\n  <Link to={url} href={url}>\n    <div className=\"wrapper\" style={imageStyle(image, backgroundColor)} />\n  </Link>\n);\n\nconst Card = ({\n  title,\n  date,\n  url,\n  headerImage,\n  headerBackgroundColor,\n  description,\n  tags = [],\n}) => (\n  <div className=\"col-sm-12 pb-4\">\n    <div className=\"custom-card\">\n      {headerImage && (\n        <CardHeader\n          url={url}\n          image={headerImage}\n          backgroundColor={headerBackgroundColor}\n        />\n      )}\n      <div className=\"data\">\n        <div className=\"content\">\n          <div className=\"stats\">\n            <span className=\"date\">{date.split('T')[0]}</span>\n            {tags.map(name => (\n              <Tag name={name} key={name} />\n            ))}\n          </div>\n          <Link to={url} href={url}>\n            <h4 className=\"title\">{title}</h4>\n          </Link>\n          <p>{description}</p>\n          <Link to={url} href={url}>\n            ....繼續閱讀全文內容\n          </Link>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  date: PropTypes.string,\n  url: PropTypes.string.isRequired,\n  headerImage: PropTypes.string,\n  headerBackgroundColor: PropTypes.string,\n  description: PropTypes.string.isRequired,\n  tags: PropTypes.arrayOf(PropTypes.string),\n};\n\nCardHeader.propTypes = Card.propTypes;\n\nCard.defaultProps = {\n  headerImage: '',\n  tags: [],\n  date: '',\n  headerBackgroundColor: '',\n};\n\nexport default Card;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport Card from '../components/Card';\nimport SEO from '../components/SEO';\nimport Sidebar from '../components/Sidebar';\n\n// eslint-disable-next-line react/prop-types\nconst TagPage = ({ data, pageContext }) => {\n  const { edges } = data.allMarkdownRemark;\n  const { tag } = pageContext;\n  return (\n    <div className=\"container\">\n      <div\n        className=\"row\"\n        style={{\n          margin: 15,\n        }}\n      >\n        <Sidebar />\n\n        <div className=\"col-xl-10 col-lg-7 col-md-12 col-xs-12 order-2\">\n          <div\n            className=\"col-12\"\n            style={{\n              fontSize: 20,\n              margin: 15,\n            }}\n          >\n            {edges.length}\n            &nbsp;Articles in&nbsp;\n            {tag}\n          </div>\n          {edges.map(({ node }) => (\n            <Card {...node.frontmatter} key={node.id} />\n          ))}\n        </div>\n\n        <div className=\"col-xl-2 col-lg-1 order-3\" />\n      </div>\n\n      <SEO\n        title={tag}\n        url={`/tag/${tag}`}\n        siteTitleAlt=\"Calpa's Blog\"\n        isPost={false}\n        description={tag}\n        image=\"https://i.imgur.com/M795H8A.jpg\"\n      />\n    </div>\n  );\n};\n\nexport default TagPage;\n\nexport const pageQuery = graphql`\n  query tagQuery($tag: [String!]) {\n    allMarkdownRemark(\n      sort: { order: DESC, fields: frontmatter___date }\n      filter: { frontmatter: { tags: { in: $tag } } }\n    ) {\n      edges {\n        node {\n          id\n          frontmatter {\n            id\n            url: slug\n            title\n            date\n            tags\n            headerImage\n            description\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport Helmet from 'react-helmet';\n\nimport PropTypes from 'prop-types';\n\nimport config from '../../../data';\n\nconst schemaOrgJSONLD = ({\n  url,\n  title,\n  siteTitleAlt,\n  isPost,\n  image,\n  description,\n}) => [\n  {\n    '@context': 'http://schema.org',\n    '@type': 'WebSite',\n    url,\n    name: title,\n    alternateName: siteTitleAlt || '',\n  },\n  isPost\n    ? {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: [\n        {\n          '@type': 'ListItem',\n          position: 1,\n          item: {\n            '@id': url,\n            name: title,\n            image,\n          },\n        },\n      ],\n    }\n    : '',\n  isPost\n    ? {\n      '@context': 'http://schema.org',\n      '@type': 'BlogPosting',\n      url,\n      name: title,\n      alternateName: siteTitleAlt || '',\n      headline: title,\n      image: {\n        '@type': 'ImageObject',\n        url: image,\n      },\n      description,\n    }\n    : '',\n];\n\nconst SEO = ({\n  url, title, description, image, siteTitleAlt, isPost,\n}) => (\n  <Helmet>\n    <title>{title}</title>\n\n    {/* General tags */}\n    <meta name=\"description\" content={description} />\n    <meta name=\"image\" content={image} />\n\n    {/* Schema.org tags */}\n    <script type=\"application/ld+json\">\n      {JSON.stringify(schemaOrgJSONLD(url, title, siteTitleAlt, isPost))}\n    </script>\n\n    {/* OpenGraph tags */}\n    <meta property=\"og:url\" content={url} />\n    {isPost ? (\n      <meta property=\"og:type\" content=\"article\" />\n    ) : (\n      <meta property=\"og:type\" content=\"website\" />\n    )}\n    <meta property=\"og:title\" content={title} />\n    <meta property=\"og:description\" content={description} />\n    <meta property=\"og:image\" content={image} />\n    <meta\n      property=\"fb:app_id\"\n      content={config.siteFBAppID ? config.siteFBAppID : ''}\n    />\n\n    {/* Twitter Card tags */}\n    <meta name=\"twitter:card\" content=\"summary_large_image\" />\n    <meta\n      name=\"twitter:creator\"\n      content={config.twitter_username ? config.twitter_username : ''}\n    />\n    <meta name=\"twitter:title\" content={title} />\n    <meta name=\"twitter:description\" content={description} />\n    <meta name=\"twitter:image\" content={image} />\n  </Helmet>\n);\n\nSEO.propTypes = {\n  url: PropTypes.string.isRequired,\n  title: PropTypes.string,\n  description: PropTypes.string.isRequired,\n  image: PropTypes.string.isRequired,\n  siteTitleAlt: PropTypes.string.isRequired,\n  isPost: PropTypes.bool.isRequired,\n};\n\nSEO.defaultProps = {\n  title: config.title,\n};\n\nexport default SEO;\n","import React from 'react';\n\nimport ExternalLink from '../../ExternalLink';\n\nimport { config } from '../../../../data';\n\nimport './index.scss';\n\nconst { friends = [] } = config;\n\nconst Friend = () => (\n  <div className=\"friend\">\n    <p>友情鏈接</p>\n    {friends.map(friend => (\n      <ExternalLink\n        href={friend.href}\n        title={friend.title}\n        key={friend.title}\n        rel=\"noopener\"\n      />\n    ))}\n  </div>\n);\n\nexport default Friend;\n","import React from 'react';\n\nimport { Link } from 'gatsby';\nimport PropTypes from 'prop-types';\n\nimport './index.scss';\n\nconst LatestPost = ({ posts }) => (\n  <div className=\"latest-post\">\n    <p>最新文章</p>\n    {posts.map(({ node }) => (\n      <Link\n        to={node.frontmatter.url || node.frontmatter.slug || node.fields.slug}\n        key={node.frontmatter.url || node.frontmatter.slug || node.fields.slug}\n        href={node.frontmatter.url || node.frontmatter.slug || node.fields.slug}\n      >\n        {node.frontmatter.title}\n      </Link>\n    ))}\n  </div>\n);\n\nLatestPost.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default LatestPost;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport Friend from '../Friend';\nimport LatestPost from '../LatestPost';\nimport './index.scss';\n\n// eslint-disable-next-line react/prop-types\nconst Information = ({ totalCount, posts }) => (\n  <div className=\"d-none d-lg-block information my-2\">\n    <hr />\n    <p>\n      共&nbsp;\n      {totalCount}\n      &nbsp;篇文章\n    </p>\n    <hr />\n    <LatestPost posts={posts} />\n    <hr />\n    <Friend />\n  </div>\n);\n\nInformation.propTypes = {\n  totalCount: PropTypes.number.isRequired,\n  posts: PropTypes.array,\n};\n\nInformation.defaultProps = {\n  posts: [],\n};\n\nexport default Information;\n","import React from 'react';\nimport { Link, StaticQuery, graphql } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { config } from '../../../data';\n\nimport Information from './Information';\n\nimport './index.scss';\n\nconst {\n  wordings = [],\n  githubUsername,\n  zhihuUsername,\n  email,\n  iconUrl,\n  about,\n  facebook,\n} = config;\n\nconst Icon = ({ href, icon }) => (\n  <a\n    target=\"_blank\"\n    href={href}\n    rel=\"external nofollow noopener noreferrer\"\n    className=\"custom-icon\"\n  >\n    <span className=\"fa-layers fa-fw fa-2x\">\n      <FontAwesomeIcon icon={icon} />\n    </span>\n  </a>\n);\n\nconst Sidebar = ({ totalCount, latestPosts }) => (\n  <header className=\"intro-header site-heading text-center col-xl-2 col-lg-3 col-xs-12 order-lg-1\">\n    <div className=\"about-me\">\n      <Link to={about} href={about} className=\"name\">\n        <img className=\"avatar\" src={iconUrl} alt=\"Calpa\" />\n        <h4>Calpa</h4>\n      </Link>\n      <p className=\"mb-1\">{wordings[0]}</p>\n      <p className=\"mb-3\">{wordings[1]}</p>\n      <Icon\n        href={`https://www.zhihu.com/people/${zhihuUsername}`}\n        icon={['fab', 'zhihu']}\n      />\n      <Icon\n        href={`https://github.com/${githubUsername}`}\n        icon={['fab', 'github']}\n      />\n      <Icon href={`mailto:${email}`} icon={['far', 'envelope']} />\n      {facebook\n        && <Icon href={`https://www.facebook.com/${facebook}/`} icon={['fab', 'facebook']} />\n      }\n      <Information totalCount={totalCount} posts={latestPosts} />\n    </div>\n  </header>\n);\n\nIcon.propTypes = {\n  href: PropTypes.string.isRequired,\n  icon: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nSidebar.propTypes = {\n  totalCount: PropTypes.number,\n  latestPosts: PropTypes.array, //eslint-disable-line\n};\n\nSidebar.defaultProps = {\n  totalCount: 0,\n  latestPosts: [],\n};\n\nexport default () => (\n  <StaticQuery\n    query={graphql`\n      fragment cardData on MarkdownRemark {\n        fields {\n          slug\n        }\n        frontmatter {\n          id\n          title\n          url: slug\n          date\n          tags\n          description\n          headerImage\n        }\n      }\n\n      query SidebarQuery {\n        all: allMarkdownRemark {\n          totalCount\n        }\n\n        limited: allMarkdownRemark(\n          sort: { order: DESC, fields: frontmatter___date }\n          limit: 6\n        ) {\n          latestPosts: edges {\n            node {\n              ...cardData\n            }\n          }\n        }\n      }\n    `}\n    render={data => <Sidebar {...data.all} {...data.limited} />}\n  />\n);\n","// s = Small Square (90×90)\n// b = Big Square (160×160)\n// t = Small Thumbnail (160×160)\n// m = Medium Thumbnail (320×320)\n// l = Large Thumbnail (640×640)\n// h = Huge Thumbnail (1024×1024)\nconst defaultPicture = 'M795H8A.jpg';\n\nconst parseImgur = (rawImage, size = 'large') => {\n  if (!rawImage) {\n    return `https://i.imgur.com/${defaultPicture}`;\n  }\n\n  const mapping = {\n    'small-square': 's',\n    'big-square': 'b',\n    small: 't',\n    medium: 'm',\n    large: 'l',\n    huge: 'h',\n  };\n\n  // Don't resize the png image\n  // as there is a transparent bug in imgur\n  if (rawImage.match('(png)|(gif)')) {\n    // Prevent double http url\n    if (rawImage.match('http')) {\n      return rawImage;\n    }\n    return `https://i.imgur.com/${rawImage}`;\n  }\n\n  const resizedImage = rawImage.replace(/(.*)\\.(.*)/, `$1${mapping[size]}.$2`);\n  // Prevent double http url\n  if (resizedImage.match('http')) {\n    return resizedImage;\n  }\n  return `https://i.imgur.com/${resizedImage}`;\n};\n\nconst parseTitle = (title, text) => `title=\"${title || text}\"`;\n\nconst parseImageTag = ({ href, title, text }) => `<img class=\"lozad d-block mx-auto\" data-src=${parseImgur(\n  href,\n  'large',\n)} ${parseTitle(title, text)} />`;\n\nconst getGalleryImage = ({ href, title, text }) => `<a data-fancybox=\"gallery\" href=\"${parseImgur(\n  href,\n  'huge',\n)}\">${parseImageTag({ href, title, text })}</a>`;\n\nmodule.exports = {\n  parseImgur,\n  parseImageTag,\n  getGalleryImage,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Tag = ({ name, count }) => (\n  <a href={`/tag/${name}`} className=\"header-tag\">\n    {name}\n    &nbsp;\n    {count}\n  </a>\n);\n\nTag.propTypes = {\n  name: PropTypes.string.isRequired,\n  count: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\n\nTag.defaultProps = {\n  count: '',\n};\n\nexport default Tag;\n"],"sourceRoot":""}